HealthPGH.Views.AcaPlanComparisonView = Backbone.View.extend({
  template: JST["aca/plan-comparison"],

  className: "plan-comparison",

  collection: HealthPGH.Collections.AcaPlans,

  events: {
    "click .show-list": "onReturnToList",
    "click .unsave": "onPlanRemoval",
    "click .page-next" : "triggerPageAdvance",
    "click .page-back" : "triggerPageBack",
    "click .add-applicants" : "onAddApplicants"
  },

  initialize: function(o) {
    this._views = [],
     this.vent = o.vent,
     this.params = o.params,
     this.collection = o.collection, 
     this.household = o.household;

    this.updatePlansToCompare();
    this.page = o.page ? _.min([o.page, this._totalPages()]) : 1;
    this.listenTo(this.vent, "ui:compare-page-advance", this.onPageAdvance);
    this.listenTo(this.vent, "ui:compare-page-back", this.onPageBack);
  },

  leave: function() {
    this._removeViews();
    this.remove();
  },

  triggerPageBack: function() {
    if (this.page > 1) {
      this.vent.trigger("ui:compare-page-back");
      //$('html, body').animate({scrollTop: 0}, "fast");
    }
  },

  triggerPageAdvance: function() {
    if (this.page < this._totalPages()) {
      this.vent.trigger("ui:compare-page-advance");
    }
  },

  onAddApplicants: function() {
    Backbone.history.navigate( RB.editApplicationPath( this.household, this.params));
    this.vent.trigger("show:application");
  },

  onPlanRemoval: function(ev) {
    var id = $(ev.target).data('id'),
      len = this._plansToCompare.length;

    if (id ) {
      var p = this.collection.get(id);
      p.updateSaved(!1);
      this.updatePlansToCompare();
      this.params.updateComparisonPlan(id, !1);

      if (this.page > 1 && (len % 3 == 1)) {
        this.onPageBack();
      } else {
        Backbone.history.navigate( RB.comparePlansPath( this.household, this.params )); 
        this.render();
      } 
    }
  },


  onReturnToList: function() {
    Backbone.history.navigate(RB.listPlansPath( this.household, this.params ));
    this.vent.trigger("show:list");
  },

  //Chosen to not track Compare page # in URL, b/c do we really need it?
  onPageAdvance: function() {
    this.page+= 1;
    this.render();
  },

  onPageBack: function() {
    var p = this.page - 1;
    this.page = _.max([1, p]);
    Backbone.history.navigate( RB.comparePlansPath( this.household, this.params )); 
    this.render();
  },

  render: function() {
    var a = {}, ctx = this;

    if (this._plansToCompare.length > 0) {
      plan1 = this._getPlanAttributes(0, 'plan1_'), 
      plan2 = this._getPlanAttributes(1, 'plan2_'),
      plan3 = this._getPlanAttributes(2, 'plan3_');

      a = _.extend( a, plan1, plan2, plan3 );
    }

    a = _.extend( a, {
      current_page: this.page,
      total_plans: this._plansToCompare.length,
      total_pages: this._totalPages(),
      formatted_phone: '<%= number_to_phone(SiteSetting.customer_service_phone, area_code: true) %>'
    });

    var h = this.template(a);
    this.$el.html( h );
  /*
    this.$el.find('.affix-plan-comparison').affix({
      offset: {
        top: 128 //$('.navbar-default').height() //+ $('.plan-comparison-controls').height()
      }
    });
  */
    this.updateDisplay();
    $('html, body').animate({scrollTop: 0}, "fast");
    return this;
  },

  getCurrentPage: function() {
    return this.page;
  },

  updateDisplay: function() {
    this.$backBtn = this.$el.find('.page-back'),
    this.$nextBtn = this.$el.find('.page-next');

    if (this.page > 1) {
      this.$backBtn.css({visibility: 'visible'});
    } else {
      this.$backBtn.css({visibility: 'hidden'});
    }

    if (this.page >= this._totalPages() || this._totalPages() == 1) {
      this.$nextBtn.css({visibility: 'hidden'});
    } else {
      this.$nextBtn.css({visibility: 'visible'});
    } 
  },

  updatePlansToCompare: function() {
    var ctx = this,
      s = this.collection.where({saved: !0});

    if (s.length == 0) {
      this._plansToCompare = [];
      this._defaultAttributes = {};
      return;
    }

    var t = s[0].isPremiumCalculated(),
      field = ( t  ? 'net_premium' : 'metal_level_value'),
      sort_by = function(field, reverse, primer){

        var key = function (x) { return primer ? primer(x.get(field)) : x.get(field)};

        return function (a, b) {
          var x = a.get(field), y = b.get(field);

          return ( x < y ? -1 : (x > y ? 1 : 0)) * [1,-1][+!!reverse];
        }
      }

    this._plansToCompare = s.sort(sort_by( field, !1, function(x) { return x; }));
    this._attributes = this._plansToCompare[0].attributes;
  },

  _totalPages: function() {
    return this._plansToCompare.length > 0 ? Math.ceil(this._plansToCompare.length / 3) : 0;
  },

  // YOU MUST INCLUDE TRAILING '_' on prefix!!!
  _getPlanAttributes: function(i, prefix) {
    var h = {},
      j = this._getPlanIndex(i),
      model = this._plansToCompare[j];
      a = model ? model.toAttributes() : this._defaultAttributes();

    _.each( _.keys(a), function(k) { h[prefix+k] = a[k] });
    return h;
  },

  _defaultAttributes: function() {
    var f = this._plansToCompare[0];
    return _.object( _.map( _.keys(this._attributes), function(a) { return [a, '']; }));
  },

  _getPlanIndex: function(i) {
    return (this.page - 1) * 3 + i;
  },

  _removeViews: function() {
    _.each(this._views, function(v) {
      v.leave ? v.leave() : v.remove();
    });
  }
});
